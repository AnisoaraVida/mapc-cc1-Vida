@startuml
package client{
Class App{
+ {static} main(args: string[*]): void
}
}

package cloud{
package api{
Interface Cloud{
    getPlans() : Set<DeploymentPlan>
    deployPlan(DeploymentPlan plan) : boolean
    startPlan(DeploymentPlan plan) : boolean
    stopPlan(DeploymentPlan plan) : boolean
    removePlan(DeploymentPlan plan) : boolean
    }

Cloud --|> NamedElement

Interface Component{
    getComponentType() : ComponentType
}

Component ---|> Resource
Component ---|> RunnableElement


Interface ComponentType{
    componentTypeKey() : string
    createComponent(String name) : Component
}

ComponentType ---|> Resource

Interface ComputeNode{
addVMachine(VirtualMachine machine) : boolean
removeVMachine(VirtualMachine machine) : boolean
getVMachines() : Set<VirtualMachine>
shutDownVMachine(VirtualMachine machine) : boolean
startVirtualMachine(VirtualMachine machine) : boolean
}

ComputeNode ---|> Resource
ComputeNode ---|> RunnableElement

Interface DeploymentPlan{
    newStandardComputeNode(StandardComputeNodeSize size, String name) : ComputeNode
    newPersonalizedComputeNode(int nbCPU, int memory, String name) : ComputeNode
    newVirtualMachine(String name) : VirtualMachine
    newService(String key, String name) : Service
    newComponent(String key, String name) : Component
    getNodes() : Set<ComputeNode>
    getNode(String name) : Optional<ComputeNode>
    deployVMonNode(VirtualMachine vm, ComputeNode node) : DeploymentPlan
    deployServiceOnVm(Service service, VirtualMachine vm) : DeploymentPlan
    attachComponentToService(Component component, Service service) DeploymentPlan
    isValid() : boolean
    getReport() : DeploymentPlanReport
}
DeploymentPlan ---|> NamedElement
DeploymentPlan ---|> RunnableElement

Interface DeployementReport{
    exceptions() : List<Exception>

    addException(Exception e) : boolean

    messages() : List<String>
}


Interface DeploymentShutdown{
    setNext(DeploymentPlanShutdown handler)
    stop(DeploymentPlan plan) : boolean
}
Interface DeployementPlanStartup{
    setNext(DeploymentPlanStartup handler)
    start(DeploymentPlan plan, boolean bestEffort) : boolean
}


Interface NamedElement{
    name() : string
}

Interface Resource{
        getNbCPU() : int
        getMemory() : int
        setNbCPU(int nbCPU)
        setMemory(int memory)

}

Resource --|> NamedElement

Interface RunnableElement{
    start() : boolean
    stop() : boolean
    isRunning() : boolean
    restart() : default boolean
}


Interface Service{
    getComponent() : Component

    setComponent(Component component);

    getServiceType() : ServiceType
}

Service ---|> Resource
Service ---|> RunnableElement

Interface ServiceType{
    serviceTypeKey() : string
    createService(String name) : Service
}
ServiceType --|> NamedElement

Enum StandardComputeNodeSize{
    XSMALL, SMALL, MEDIUM, MEDIUM LARGE, LARGE, XLARGE
    - nbCPU : int
    - memory : int
    - StandardComputeNodeSize(int nbCPU, int memory)
    + getNbCPU() : int
    + getMemory() : int
}

Interface VirtualMachine{
    setOS(VmOSName os)

    getOS() : VmOSName

    addService(Service service) : boolean

    removeService(Service service) : boolean

    getServices() : Set<Service>
}

VirtualMachine ---|> Resource
VirtualMachine ---|> RunnableElement

}

package impl{

    package base{
Class CloudImpl{
    - plans : Set<DeploymentPlan>
    + getPlans() : Set<DeploymentPlan>
    + deployPlan(DeploymentPlan plan)  : boolean
    + stopPlan(DeploymentPlan plan) : boolean
    + startPlan(DeploymentPlan plan) : boolean
    + removePlan(DeploymentPlan plan) : boolean
}
CloudImpl --|> NamedElementImpl
CloudImpl ..|> Cloud

Class ComponentImpl{
    - runnable : DefaultRunnableElement
     - resource : DefaultResource

         + int getNbCPU() : int
         + int getMemory() : int
         + setNbCPU(int nbCPU) : void
         + setMemory(int memory) : void
          + start() : boolean
         +  stop() : boolean
         + isRunning() : boolean
}
ComponentImpl --|> NamedElementImpl
ComponentImpl ..|> Component

Class ComputeNodeImpl{
        - resource : DefaultResource
         -  runnable : DefaultRunnableElement
         -  vmachines : Set<VirtualMachine>
         -  remainingCPU : int
         - remainingMemory : int
         + addVMachine(VirtualMachine machine) : boolean
         + removeVMachine(VirtualMachine machine) : boolean
         + getVMachines() : Set<VirtualMachine>
         + shutDownVMachine(VirtualMachine machine) : boolean
         + startVirtualMachine(VirtualMachine machine) : boolean
         + getNbCPU() : int
         + getMemory() : int
         + setNbCPU(int nbCPU) : void
         + setMemory(int memory) : void
         + start() : boolean
         + stop() : boolean
         + isRunning() : boolean

}
ComponentImpl --|> NamedElementImpl
ComponentImpl ..|> ComputeNode

Class DefaultComputeNode{
    + DefaultComputeNode(String name)}
DefaultComputeNode ---|> ComputeNodeImpl

Class DefaultDeployementPlan
DefaultDeployementPlan ---|> DeploymentPlanImpl

Class DefaultDeployementPlanReport
DefaultDeployementPlanReport ---|> DefaultDeployementPlanReportImpl

Class DefaultRessource
DefaultRessource ---|> DefaultRessourceImpl

Class DefaultRunnableMachine
DefaultRunnableMachine ---|> DefaultRunnableMachineImpl

Class DefaultVirtualMachine
DefaultVirtualMachine ---|> DefaultVirtualMachineImpl

Class DeploymentPlanImpl
DeploymentPlanImpl --|> NamedElementImpl
DeploymentPlanImpl ..|> DeploymentPlan

Class DeploymentPlanReportImpl
DeploymentPlanReportImpl --|> NamedElementImpl
DeploymentPlanReportImpl ..|> DeploymentPlanReport

Class DeploymentPlanStartupImpl
DeploymentPlanStartumImpl --|> NamedElementImpl
DeploymentPlanStartumImpl ..|> DeploymentPlanStartup

Class NamedElementImpl
NamedElementImpl .|> NamedElement

Class ResourceImpl
ResourceImpl --|> NamedElementImpl
ResourceImpl ..|> Resource

Class RunnableElementImpl
RunnableElementImpl ..|> RunnableElement

Class ServiceImpl
ServiceImpl --|> NamedElementImpl
ServiceImpl ..|> Service

Class ServiceShutdown
ServiceShutdown --|> DeploymentPlanShutdownImpl

Class ServiceStartup
ServiceStartup --|> DeploymentPlanStartupImpl

Class VirtualMachineImpl
VirtualMachineImpl --|> NamedElementImpl
VirtualMachineImpl ..|> VirtualMachine

}


    package shutdown{
Class ApplicationServiceShutdown
ApplicationServiceShutdown --|> ServiceShutdown

Class ComputeNodeShutdown
ComputeNodeShutdown --|> DeploymentPlanShutdownImpl

Class LoggingServiceShutdown
LoggingServiceShutdown --|> ServiceShutdown

Class MonitoringServiceShutdown
MonitoringServiceShutdown --|> ServiceShutdown

Class StorageServiceShutdown
StorageServiceShutdown --|> ServiceShutdown

Class VirtualMachineShutdown
VirtualMachineShutdown --|> DeploymentPlanShutdownImpl

Class WebServiceShutdown
WebServiceShutdown  --|> ServiceShutdown

}
    package startup{
Class ApplicationServiceStartup
ApplicationServiceStartup --|> ServiceStartup

Class ComputeNodeStartup
ComputeNodeStartup --|> DeploymentPlanStartupImpl

Class LoggingServiceStartup
LoggingServiceStartup --|> ServiceStartup

Class MonitoringServiceStartup
MonitoringServiceStartup --|> ServiceStartup

Class StorageServiceStartup
StorageServiceStartup --|> ServiceStartup

Class VirtualMachineStartup
VirtualMachineStartup --|> DeploymentPlanStartupImpl

Class WebServiceStartup
WebServiceStartup --|> ServiceStartup
}

}
}
}
package componentprovider{
package api{
Interface ApacheComponentType
ApacheComponentType --|> ComponentType

Interface FlumeComponentType
FlumeComponentType --|> ComponentType

Interface MongoComponentType
MongoComponentType --|> ComponentType

Interface MySQLComponentType
MySQLComponentType --|> ComponentType

Interface NginxComponentType
NginxComponentType --|> ComponentType

Interface PrometheusComponentType
PrometheusComponentType --|> ComponentType

Interface TomcatComponentType
TomcatComponentType --|> ComponentType

}
package impl{
Class Apache
Apache --|> ComponentImpl
Apache ..|> ApacheComponentType

Class Flume
Flume --|> ComponentImpl
Flume ..|> FlumeComponentType

Class Mongo
Mongo --|> ComponentImpl
Mongo ..|> MongoComponentType

Class MySQL
MySQL --|> ComponentImpl
MySQL ..|> MySQLComponentType

Class Nginx
Nginx --|> ComponentImpl
Nginx ..|> NginxComponentType

Class Prometheus
Prometheus --|> ComponentImpl
Prometheus ..|> PrometheusComponentType

Class Tomcat
Tomcat --|> ComponentImpl
Tomcat ..|> TomcatComponentType

}
}

package creation{
package api{
Interface CloudProvider
Interface ComponentCreator
Interface ComputeNodeCreator
Interface DeploymentPlanCreator
Interface ServiceCreator
Interface VirtualMachineCreator

}

package cloudproviders{
package amiazon{
Class AmiazonCloud
AmiazonCloud --|> CloudImpl

Class AmiazonCloudProvider
AmiazonCloudProvider ..|> CloudProvider

Class AmiazonDeployementPlanCreator
AmiazonDeployementPlanCreator ..|> DeploymentPlanCreator

}
package softcloud{
}
}

package impl{
Class CloudProviderLoader
}

}

package exception{
Class ResourceAlreadyExistsException
}

package io{
Class ServiceDefinitionLoader
}

package registry{
Class ComponentTypeRegistry
Class ServiceTypeRegistry
}

package serviceprovider{
package api{
Interface AppServerServiceType
AppServerServiceType --|> ServiceType

Enum BasicServiceTypeNames
BasicServiceTypeNames ..|> ServiceTypeName

Interface LoggingServiceType
LoggingServiceType --|> ServiceType

Interface MonitoringServiceType
MonitoringServiceType --|> ServiceType

Interface ServiceTypeName

Interface StorageServerServiceType
StorageServerServiceType --|> ServiceType

Interface WebServerServiceType
WebServerServiceType --|> ServiceType

}
package impl{
Class DefaultAppServerService
DefaultAppServerService --|> ServiceImpl
DefaultAppServerService ..|> AppServerServiceType

Class DefaultLoggingService
DefaultLoggingService --|> ServiceImpl
DefaultLoggingService ..|> LoggingServiceType

Class DefaultMonitoringService
DefaultMonitoringService --|> ServiceImpl
DefaultMonitoringService ..|> MonitoringServiceType

Class DefaultStorageServerService
DefaultStorageServerService --|> ServiceImpl
DefaultStorageServerService ..|> StorageServerServiceType

Class DefaultWebServerService
DefaultWebServerService --|> ServiceImpl
DefaultWebServerService ..|> WebServerServiceType
}
}

package visitable{
package api{
Interface Visitable
}
package impl{
Class VisitableImpl
VisitableImpl ...|> Visitable
}
}

package visitor{
package api{
Interface Visitor
}
}

package vmosprovider{
package api{
Interface VmOSName
Enum DefaultOSName
DefaultOSName ..|> VmOSName
}
}

@enduml